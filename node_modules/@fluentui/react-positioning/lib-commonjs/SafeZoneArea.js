"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SafeZoneArea: function() {
        return SafeZoneArea;
    },
    createSafeZoneAreaStateStore: function() {
        return createSafeZoneAreaStateStore;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = require("@griffel/react");
const _reactutilities = require("@fluentui/react-utilities");
const _react1 = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _shim = require("use-sync-external-store/shim");
const _SafeZoneAreastyles = require("./SafeZoneArea.styles");
function createSafeZoneAreaStateStore() {
    let isActive = false;
    const listeners = [];
    return {
        isActive () {
            return isActive;
        },
        toggleActive (newIsActive) {
            if (isActive === newIsActive) {
                return;
            }
            isActive = newIsActive;
            listeners.forEach((listener)=>listener(isActive));
        },
        subscribe (listener) {
            listeners.push(listener);
            return ()=>{
                const index = listeners.indexOf(listener);
                if (index > -1) {
                    listeners.splice(index, 1);
                }
            };
        }
    };
}
const SafeZoneArea = /*#__PURE__*/ _react1.memo((props)=>{
    const { debug, onMouseEnter, onMouseMove, onMouseLeave, stateStore } = props;
    const clipPathId = (0, _reactutilities.useId)();
    const styles = (0, _SafeZoneAreastyles.useStyles)();
    const active = (0, _shim.useSyncExternalStore)(stateStore.subscribe, stateStore.isActive);
    const svgRef = _react1.useRef(null);
    _react1.useImperativeHandle(props.imperativeRef, ()=>({
            updateSVG ({ containerPlacementSide, containerRect, mouseCoordinates, targetRect }) {
                const svgEl = svgRef.current;
                if (!svgEl) {
                    return;
                }
                const trianglePathEl = svgEl.children.item(0);
                const debugRectEl = svgEl.children.item(2);
                const clipPathEl = svgEl.children.item(1);
                const clipPathRect = clipPathEl.firstElementChild;
                const SIZE_MULTIPLIER = 0.9;
                let svgStyle;
                let tringlePoints = [];
                let clipPoints = [];
                switch(containerPlacementSide){
                    case 'top':
                        svgStyle = {
                            width: `${containerRect.width}px`,
                            height: `${targetRect.bottom - containerRect.bottom}px`,
                            transform: `translate(${containerRect.left}px, ${containerRect.bottom}px)`
                        };
                        tringlePoints = [
                            [
                                containerRect.width,
                                0
                            ],
                            [
                                mouseCoordinates.x - containerRect.left,
                                (mouseCoordinates.y - containerRect.bottom) / SIZE_MULTIPLIER
                            ],
                            [
                                0,
                                0
                            ]
                        ];
                        clipPoints = [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                targetRect.bottom - containerRect.bottom
                            ],
                            [
                                targetRect.left - containerRect.left,
                                targetRect.bottom - containerRect.bottom
                            ],
                            [
                                targetRect.left - containerRect.left,
                                targetRect.top - containerRect.bottom
                            ],
                            [
                                targetRect.right - containerRect.left,
                                targetRect.top - containerRect.bottom
                            ],
                            [
                                targetRect.right - containerRect.left,
                                targetRect.bottom - containerRect.bottom
                            ],
                            [
                                containerRect.width,
                                targetRect.bottom - containerRect.bottom
                            ],
                            [
                                containerRect.width,
                                0
                            ]
                        ];
                        break;
                    case 'bottom':
                        svgStyle = {
                            width: `${containerRect.width}px`,
                            height: `${containerRect.top - targetRect.top}px`,
                            transform: `translate(${containerRect.left}px, ${targetRect.top}px)`
                        };
                        tringlePoints = [
                            [
                                containerRect.width,
                                containerRect.top - targetRect.top
                            ],
                            [
                                mouseCoordinates.x - containerRect.left,
                                (mouseCoordinates.y - targetRect.top) * SIZE_MULTIPLIER
                            ],
                            [
                                0,
                                containerRect.top - targetRect.top
                            ]
                        ];
                        clipPoints = [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                containerRect.top - targetRect.top
                            ],
                            [
                                containerRect.width,
                                containerRect.top - targetRect.top
                            ],
                            [
                                containerRect.width,
                                0
                            ],
                            [
                                targetRect.right - containerRect.left,
                                0
                            ],
                            [
                                targetRect.right - containerRect.left,
                                targetRect.height
                            ],
                            [
                                targetRect.left - containerRect.left,
                                targetRect.height
                            ],
                            [
                                targetRect.left - containerRect.left,
                                0
                            ]
                        ];
                        break;
                    case 'left':
                        svgStyle = {
                            width: `${targetRect.right - containerRect.right}px`,
                            height: `${containerRect.height}px`,
                            transform: `translate(${containerRect.right}px, ${containerRect.top}px)`
                        };
                        tringlePoints = [
                            [
                                (mouseCoordinates.x - containerRect.right) / SIZE_MULTIPLIER,
                                mouseCoordinates.y - containerRect.top
                            ],
                            [
                                0,
                                containerRect.height
                            ],
                            [
                                0,
                                0
                            ]
                        ];
                        clipPoints = [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                containerRect.height
                            ],
                            [
                                targetRect.right - containerRect.right,
                                containerRect.height
                            ],
                            [
                                targetRect.right - containerRect.right,
                                targetRect.bottom - containerRect.top
                            ],
                            [
                                targetRect.left - containerRect.right,
                                targetRect.bottom - containerRect.top
                            ],
                            [
                                targetRect.left - containerRect.right,
                                targetRect.top - containerRect.top
                            ],
                            [
                                targetRect.right - containerRect.right,
                                targetRect.top - containerRect.top
                            ],
                            [
                                targetRect.right - containerRect.right,
                                0
                            ]
                        ];
                        break;
                    default:
                        svgStyle = {
                            width: `${containerRect.left - targetRect.left}px`,
                            height: `${containerRect.height}px`,
                            transform: `translate(${targetRect.left}px, ${containerRect.top}px)`
                        };
                        tringlePoints = [
                            [
                                (mouseCoordinates.x - targetRect.left) * SIZE_MULTIPLIER,
                                mouseCoordinates.y - containerRect.y
                            ],
                            [
                                containerRect.left - targetRect.left,
                                containerRect.height
                            ],
                            [
                                containerRect.left - targetRect.left,
                                0
                            ]
                        ];
                        clipPoints = [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                targetRect.top - containerRect.top
                            ],
                            [
                                targetRect.width,
                                targetRect.top - containerRect.top
                            ],
                            [
                                targetRect.width,
                                targetRect.bottom - containerRect.top
                            ],
                            [
                                0,
                                targetRect.bottom - containerRect.top
                            ],
                            [
                                0,
                                containerRect.height
                            ],
                            [
                                containerRect.left - targetRect.left,
                                containerRect.height
                            ],
                            [
                                containerRect.left - targetRect.left,
                                0
                            ]
                        ];
                        break;
                }
                const trianglePath = `M ${tringlePoints.flatMap((p)=>p).join(' ')} z`;
                const clipPath = `M ${clipPoints.flatMap((p)=>p).join(' ')} z`;
                Object.assign(svgEl.style, svgStyle);
                trianglePathEl.setAttributeNS(null, 'd', trianglePath);
                clipPathRect.setAttributeNS(null, 'd', clipPath);
                debugRectEl === null || debugRectEl === void 0 ? void 0 : debugRectEl.setAttributeNS(null, 'd', clipPath);
            }
        }), []);
    return /*#__PURE__*/ _react1.createElement("div", {
        className: (0, _react.mergeClasses)(styles.wrapper, active && styles.wrapperActive),
        "data-safe-zone": ""
    }, active ? /*#__PURE__*/ _react1.createElement("svg", {
        "aria-hidden": true,
        className: styles.svg,
        xmlns: "http://www.w3.org/2000/svg",
        ref: svgRef
    }, /*#__PURE__*/ _react1.createElement("path", {
        className: (0, _react.mergeClasses)(styles.triangle, debug && styles.triangleDebug),
        clipPath: `url(#${clipPathId})`,
        onMouseEnter: onMouseEnter,
        onMouseMove: onMouseMove,
        onMouseLeave: onMouseLeave
    }), /*#__PURE__*/ _react1.createElement("clipPath", {
        id: clipPathId
    }, /*#__PURE__*/ _react1.createElement("path", null)), debug && /*#__PURE__*/ _react1.createElement("path", {
        className: styles.rectDebug
    })) : null);
});
